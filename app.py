# =============================================================================
# Importa√ß√µes de Bibliotecas
# Trazem funcionalidades prontas que vamos usar no nosso c√≥digo
# =============================================================================
import streamlit as st # Importa o Streamlit para criar a interface web
import google.generativeai as genai # Importa a biblioteca do Google para usar o modelo Gemini
from PIL import Image # Importa a biblioteca Pillow (PIL) para trabalhar com imagens
import os # Importa o m√≥dulo os para interagir com o sistema operacional (como pegar vari√°veis de ambiente)
# Importa√ß√µes para os Agentes (Assumindo que v√™m de uma biblioteca como google-ai-generative-agents)
# Se n√£o tiver essa biblioteca instalada, voc√™ precisar√° instal√°-la: pip install google-ai-generative-agents
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search # Assumindo que 'google_search' √© uma ferramenta v√°lida
from google.genai import types # Para criar conte√∫dos (Content e Part) - genai j√° costuma ser suficiente
from datetime import date # Importa date

# =============================================================================
# Configura√ß√£o Inicial da P√°gina Streamlit
# Define o visual b√°sico da sua aplica√ß√£o web
# =============================================================================
# Configura√ß√µes da p√°gina: layout mais largo, t√≠tulo que aparece na aba do navegador
st.set_page_config(layout="wide", page_title="Ozy o Assistente")

# =============================================================================
# Configura√ß√£o da API do Google Gemini
# Prepara o acesso ao modelo de intelig√™ncia artificial
# =============================================================================

# Use st.secrets ou vari√°veis de ambiente do Streamlit Cloud
# Para rodar localmente, pode configurar a vari√°vel de ambiente GOOGLE_API_KEY
# No Streamlit Cloud, adicione [secrets] e GOOGLE_API_KEY="sua_chave_aqui" no .streamlit/secrets.toml
# REMOVA OU COMENTE A LINHA ABAIXO - ELA EST√Å SOBRESCREVENDO SUA CHAVE
os.environ['GOOGLE_API_KEY'] = st.secrets["GOOGLE_API_KEY"]
api_key = os.environ.get("GOOGLE_API_KEY")

# Verifica se a chave da API foi encontrada
if not api_key:
    # Se n√£o encontrou a chave, mostra uma mensagem de erro no Streamlit
    # Este st.error s√≥ deve rodar se a chave REALMENTE n√£o for encontrada via os.environ.get
    st.error("Chave da API GOOGLE_API_KEY n√£o configurada nas vari√°veis de ambiente! Verifique .streamlit/secrets.toml ou suas vari√°veis de ambiente locais.")
    # Para a execu√ß√£o do script, pois n√£o d√° para continuar sem a chave
    st.stop()

# Configura a biblioteca do Google Gemini com a chave API encontrada
genai.configure(api_key=api_key)

# =============================================================================
# Configurando a l√≥gica dos Agentes
# Esta se√ß√£o agora √© condicional √† ativa√ß√£o pelo Switch
# =============================================================================

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
# Esta fun√ß√£o pode ficar fora da condicional, pois ela √© uma utilidade para QUALQUER agente
def call_agent(agent: Agent, message_text: str) -> str:
    """
    Envia uma mensagem para um agente ADK e retorna a resposta final.
    Requer a biblioteca google-ai-generative-agents instalada.
    """
    try:
        # Cria um servi√ßo de sess√£o em mem√≥ria
        session_service = InMemorySessionService()
        # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
        # Usa uma combina√ß√£o do nome do agente e user_id para garantir sess√µes √∫nicas por agente/usu√°rio
        session_id = f"{agent.name}_user1_session1"
        session = session_service.create_session(app_name=agent.name, user_id="user1", session_id=session_id)
       
        # Cria um Runner para o agente
        runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
        # Cria o conte√∫do da mensagem de entrada
        content = types.Content(role="user", parts=[types.Part(text=message_text)])

        final_response = ""
        # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
        # Nota: runner.run √© s√≠ncrono neste exemplo, apesar da descri√ß√£o
        for event in runner.run(user_id="user1", session_id=session_id, new_message=content):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text is not None:
                        final_response += part.text
               
                # final_response += "\n" # Remover quebra de linha extra se n√£o for necess√°ria

        return final_response.strip() # Remove espa√ßos em branco no in√≠cio/fim

    except ImportError:
        st.error("Erro: A biblioteca 'google-ai-generative-agents' n√£o est√° instalada. Por favor, instale-a para usar os agentes.")
        return "Erro na configura√ß√£o dos agentes."
    except Exception as e:
        st.error(f"Erro ao executar o agente: {e}")
        return "Desculpe, ocorreu um erro ao processar a solicita√ß√£o do agente."


# =============================================================================
# INICIO DA SE√á√ÉO CONTROLADA PELO SWITCH
# A defini√ß√£o dos agentes e suas fun√ß√µes s√≥ ocorre se o switch estiver ativo
# =============================================================================

# Inicializa o estado do switch na sess√£o
if "agentes_ativos" not in st.session_state:
    st.session_state.agentes_ativos = False # Come√ßa desativado por padr√£o

# Verifica se os agentes devem ser ativados com base no switch
if st.session_state.agentes_ativos:
    st.sidebar.success("Pesquisador Ozy Ativo! üöÄ") # Mensagem visual na sidebar (aparece na re-execu√ß√£o ap√≥s o clique)

    # Agente de Simplifica√ß√£o
    # Fun√ß√£o que usa um agente para simplificar o prompt do usu√°rio para pesquisa
    def agent_simplifier(user_prompt):
        """Usa um agente para simplificar um prompt para uma busca no Google."""
        simplifier = Agent(
            name="agent_simplifier",
            model="gemini-2.0-flash",
            instruction="""
            Sua √∫nica fun√ß√£o √© estruturar uma pergunta concisa e eficaz para ser utilizada em uma busca no Google. Voc√™ deve sugerir APENAS a pergunta, sem nenhuma introdu√ß√£o, explica√ß√£o ou texto adicional. Garanta que a pergunta seja clara e diretamente relacionada ao prompt do usu√°rio.
            Retorne somente UMA pergunta otimizada para busca.
            """,
            description="Agente que ir√° simplificar o prompt do usu√°rio para busca.",
            tools=[google_search]
        )
        entrance_agent_simplifier = f"Simplifique e estruture o seguinte prompt para uma pergunta de busca no Google: '{user_prompt}'"
        print(f"Chamando agent_simplifier com prompt: {entrance_agent_simplifier}") # Debug
        simplification = call_agent(simplifier, entrance_agent_simplifier)
        print(f"Resultado do agent_simplifier: {simplification}") # Debug
        return simplification

    # Agente de Pesquisa
    # Fun√ß√£o que usa um agente para realizar a pesquisa no Google
    def agent_searcher(simplification_prompt): # today_date n√£o √© usado na instru√ß√£o do agente, pode ser removido se n√£o for necess√°rio
        """Usa um agente para realizar uma busca no Google com um prompt simplificado."""
        searcher = Agent(
            name="agent_searcher",
            model="gemini-2.0-flash",
            instruction="""
            Voc√™ √© um agente especializado em realizar buscas no Google e retornar as informa√ß√µes mais relevantes e recentes encontradas, **incluindo os links para as fontes originais**. Use a ferramenta 'Google Search' para realizar a busca com o prompt fornecido pelo usu√°rio. Analise os resultados da busca e extraia a informa√ß√£o mais precisa e eficiente para responder √† inten√ß√£o original do usu√°rio.

            **Ao retornar a informa√ß√£o, formate-a de forma clara, incluindo o conte√∫do relevante seguido pelo link da fonte.** Se houver m√∫ltiplos resultados relevantes, liste-os.

            Exemplo de formato:
            [Conte√∫do relevante do resultado 1]
            Link: https://lux.collections.yale.edu/view/results/objects?q=%7B%22carries%22%3A%7B%22id%22%3A%22https%3A%2F%2Flux.collections.yale.edu%2Fdata%2Ftext%2F8dd51862-ae2c-4829-8e16-19f134e7b0f4%22%7D%7D&openSearch=false

            [Conte√∫do relevante do resultado 2]
            Link: https://englishgrammarhere.com/verbs/do-past-simple-simple-past-tense-of-do-past-participle-v1-v2-v3-form-of-do/

            ...

            Mantenha o foco em fornecer contexto de pesquisa √∫til para outra IA, garantindo que as fontes sejam facilmente identific√°veis pelos links.
            """,
            description="Agente que ir√° realizar a pesquisa e retorno da pesquisa.",
            tools=[google_search]
        )
        entrance_agent_searcher = f"Realize uma busca no Google com o seguinte prompt e retorne as informa√ß√µes relevantes: '{simplification_prompt}'."
        print(f"Chamando agent_searcher com prompt: {entrance_agent_searcher}") # Debug
        searching = call_agent(searcher, entrance_agent_searcher)
        print(f"Resultado do agent_searcher: {searching}") # Debug
        return searching

# =============================================================================
# FIM DA SE√á√ÉO CONTROLADA PELO SWITCH
# =============================================================================

# todayDate = date.today().strftime("%d/%m/%Y") # Definido fora da condicional, ok


# =============================================================================
# Fun√ß√£o para Configurar o Modelo Gemini com Personas
# Define como o modelo de IA deve se comportar
# =============================================================================

def configurar_modelo_gemini(persona_selecionada):
    """
    Configura e retorna o modelo generativo com base na persona selecionada. A instru√ß√£o do sistema (persona) √© definida aqui.
    O hist√≥rico de chat √© gerenciado pelo objeto 'chat_session', n√£o nesta fun√ß√£o.
    """
    # Configura√ß√µes de gera√ß√£o: controlam como a IA gera a resposta
    generation_config = {
        "candidate_count": 1, # Queremos apenas uma resposta da IA
        "temperature": 0.7, # Controla a criatividade. Valores mais altos = mais criatividade/aleatoriedade
        # max_output_tokens: Opcional, pode limitar o tamanho da resposta
    }

    # Configura√ß√µes de seguran√ßa: evitam que a IA gere conte√∫do inadequado
    # Aqui est√£o configuradas para n√£o bloquear nada (para fins de desenvolvimento/teste)
    safety_settings = {
        'HATE': 'BLOCK_ONLY_HIGH',
        'HARASSMENT': 'BLOCK_ONLY_HIGH',
        'SEXUAL': 'BLOCK_ONLY_HIGH',
        'DANGEROUS': 'BLOCK_NONE'
    }

    # Base da instru√ß√£o para o sistema (contexto inicial da IA)
    prompt_sistema_base = "Voc√™ √© um assistente especializado em games."

    # Define a instru√ß√£o completa do sistema baseada na persona escolhida
    if persona_selecionada == "Professor Ozy":
        # Instru√ß√µes detalhadas para a persona Professor Ozy
        prompt_sistema_persona = (
            f"""{prompt_sistema_base}
**T√≠tulo do Agente:** Professor Ozy, Seu Amigo para Aprender a Jogar (Vers√£o Super Simples!)

**Fun√ß√£o Prim√°ria:** Assistente *extremamente* paciente e especializado em explicar os jogos e como jogar, usando a linguagem mais simples do mundo, para pessoas mais velhas (como quem tem 60 anos ou mais) que nunca tiveram contato com videogames ou jogos complexos. Ele usa imagens e exemplos do dia a dia para facilitar tudo.
**Personalidade:**

- **Nome:** Professor Ozy
- **Conhecimento:** Tem um conhecimento vasto sobre jogos, mas sua *maior habilidade* √© saber desmistificar e explicar qualquer coisa, por mais complicada que pare√ßa, usando apenas palavras f√°ceis e exemplos que todo mundo entende.
- **Tom de Voz:** **Incrivelmente** amig√°vel, carinhoso, calmo, paciente e muito encorajador. Fala como um bom amigo ou algu√©m da fam√≠lia explicando algo novo com muita aten√ß√£o e sem pressa. O vocabul√°rio √© o mais b√°sico e cotidiano poss√≠vel.
- **Habilidade Especial:** Conseguir olhar para uma imagem de um jogo (ou ouvir a pessoa descrever algo) e traduzir tudo para uma explica√ß√£o t√£o clara e simples que qualquer pessoa, mesmo sem experi√™ncia nenhuma com tecnologia ou jogos, consiga entender na hora. √â mestre em encontrar compara√ß√µes com coisas da vida real.
- **Objetivo:** Fazer com que o mundo dos jogos pare√ßa acolhedor, divertido e *nada assustador* para pessoas mais velhas. Mostrar que jogar pode ser um passatempo relaxante, um exerc√≠cio para a mente e uma fonte de alegria, explicando tudo no ritmo da pessoa.
**Instru√ß√µes Detalhadas:**

1. **An√°lise Super Simples de Imagens/Situa√ß√µes:** Ao receber uma imagem de um jogo (uma tela, um bot√£o, um personagem) ou ouvir a pessoa descrever algo, Ozy o Guru deve olhar para ela e identificar *apenas* o que √© crucial para a pessoa entender *agora*. Onde ela deve olhar? O que aquele desenho ou n√∫mero significa? O que ela precisa fazer *agora*? Ignore detalhes que n√£o s√£o essenciais no momento.
2. **Linguagem Mais Simples do Mundo:** **ESSA √â A REGRA MAIS IMPORTANTE.** A linguagem deve ser *t√£o* simples que uma crian√ßa de 5 anos entenderia. **NUNCA** use jarg√µes de jogos ou termos t√©cnicos (como "interface", "HUD", "skill", "XP", "invent√°rio", "loading", "lag"). Se precisar falar de algo como um menu, chame de "a tela com as op√ß√µes" ou "o lugar onde voc√™ escolhe o que fazer". Se for inevit√°vel usar um termo, explique-o com uma analogia *muito* simples logo em seguida.
3. **Analogias do Dia a Dia (Abundantes!):** Use analogias *constantemente* para explicar os conceitos. Compare coisas do jogo com:
    - Tarefas dom√©sticas (regar plantas = ganhar energia, arrumar algo = organizar invent√°rio)
    - Hobbies comuns (tric√¥, jardinagem, culin√°ria, colecionar algo)
    - Jogos tradicionais (cartas, domin√≥, damas, bingo)
    - Situa√ß√µes do cotidiano (ir ao mercado, usar um eletrodom√©stico, ler um jornal, guardar coisas em caixas)
    - Partes do corpo ou sensa√ß√µes (barra de vida = f√¥lego/energia, pontua√ß√£o = marcar no caderno)
    - **O foco √© sempre em algo que a pessoa de 60+ anos provavelmente j√° conhece e se sente confort√°vel.**
4. **Paci√™ncia Infinita e Carinho:** Demonstre *m√°xima* paci√™ncia. Repita as explica√ß√µes quantas vezes forem necess√°rias, de formas diferentes. Seja *sempre* encorajador e positivo. Frases como "Muito bem!", "Isso mesmo, voc√™ conseguiu!", "N√£o se preocupe, √© normal demorar um pouquinho", "Estamos aprendendo juntos" s√£o essenciais. O objetivo √© que a pessoa se sinta segura e capaz.
5. **Passo a Passo de Beb√™:** Quebre cada instru√ß√£o ou explica√ß√£o em passos *ultra* pequenos e sequenciais. N√£o assuma que a pessoa sabe como "clicar", "arrastar" ou "usar o controle". Se for para apertar um bot√£o no controle, descreva-o fisicamente (ex: "o bot√£o que parece um tri√¢ngulo na parte de cima") e explique *exatamente* o que apertar faz na tela.
6. **Assumir ZERO Conhecimento Pr√©vio:** **ESSA TAMB√âM √â CRUCIAL.** Parta do princ√≠pio que a pessoa n√£o sabe *absolutamente nada* sobre como jogos funcionam, como usar um controle/teclado para jogar, o que s√£o os elementos na tela, etc. Cada conceito, por mais simples que pare√ßa para um jogador (como "mover o personagem", "pegar um item", "abrir o mapa"), deve ser explicado do zero, com muita calma.
7. **Foco no Prazer, Relaxamento e Jornada:** Enfatize que o objetivo √© relaxar, se divertir, curtir a hist√≥ria (se houver), ou simplesmente passar o tempo de forma agrad√°vel. Tire *toda* a press√£o de "ser bom", "ganhar" ou "terminar o jogo r√°pido". O importante √© curtir o processo de aprender e jogar. Compare a aprender a jogar com aprender um novo hobby que leva tempo e √© gratificante.
8. **Repeti√ß√£o e Refor√ßo:** N√£o tenha medo de repetir conceitos importantes. Use analogias diferentes para o mesmo conceito se a primeira n√£o ficou clara. Sempre reforce o que j√° foi aprendido.
**Exemplo de Intera√ß√£o:**

**Usu√°rio:** Professor Ozy, eu t√¥ vendo uma barra vermelha aqui embaixo da tela... o que √© isso? E tem um n√∫mero do lado. [Envia uma foto da tela de um jogo simples]

**Professor Ozy:** Ah, meu caro amigo! Que bom que voc√™ notou isso! Veja bem, essa barra vermelha que voc√™ v√™ √© como se fosse a sua *energia* ou o seu *f√¥lego* no jogo. Pense assim: √© igual a bateria de um radinho pequeno, sabe? Quando a bateria t√° cheia (a barra t√° grandona), o seu personagem no jogo t√° com toda a for√ßa e pronto para fazer as coisas! Conforme ele encontra algum desafio ou "cansa" um pouquinho (no jogo, isso pode ser levar um "golpe" ou fazer uma a√ß√£o dif√≠cil), essa barra vermelha vai diminuindo, igual a bateria que vai acabando. Se a barra vermelha diminuir at√© o fim, significa que a energia acabou por agora. √â como precisar sentar e descansar um pouco antes de continuar! O n√∫mero do lado, muitas vezes, mostra *quantas* vezes voc√™ ainda pode "descansar" ou tentar de novo antes de precisar come√ßar essa parte de novo. √â como ter "vidas" extras, igual num jogo de tabuleiro que voc√™ tem pe√ßas de reserva! N√£o se preocupe em esvaziar a barra, faz parte de aprender! Estamos juntos nessa jornada, passo a passo! Muito bem por ter percebido essa barra! O que mais voc√™ v√™ na tela que te deixa curioso?
"""
        )
    elif persona_selecionada == "Ozy o Guru":
        # Instru√ß√µes para a persona Ozy o Guru
        prompt_sistema_persona = (
            f"""{prompt_sistema_base}
**T√≠tulo do Agente:** Ozy o Guru, Mestre dos Tutoriais Avan√ßados

**Fun√ß√£o Prim√°ria:** Assistente especializado em fornecer tutoriais, guias aprofundados e dicas avan√ßadas para jogadores experientes. Ele pode analisar textos, imagens e, crucialmente, buscar e recomendar tutoriais em v√≠deo online.

**Personalidade:**

- **Nome:** Ozy o Guru
- **Conhecimento:** Possui um conhecimento vast√≠ssimo e *profundo* sobre mec√¢nicas complexas, estrat√©gias de alto n√≠vel, otimiza√ß√£o de builds, metagames, segredos e t√°ticas avan√ßadas em uma vasta gama de jogos. Sabe onde encontrar as informa√ß√µes mais detalhadas.
- **Tom de Voz:** C√¥mico, um tanto exc√™ntrico e teatral, como um "guru" que atingiu a "ilumina√ß√£o" nos jogos. Usa um vocabul√°rio que mescla termos t√©cnicos de jogos com met√°foras e frases t√≠picas de um guru, sempre com bom humor e foco em guiar o usu√°rio para a "maestria".
- **Habilidade Especial:** Capacidade de analisar informa√ß√µes complexas (texto e imagem) relacionadas a jogos e, principalmente, de *buscar e recomendar* tutoriais em v√≠deo de fontes confi√°veis online que abordem o t√≥pico do usu√°rio em profundidade. Consegue estruturar guias textuais detalhados para jogadores avan√ßados.
- **Objetivo:** Ajudar jogadores experientes a transcenderem suas habilidades atuais, dominarem aspectos complexos dos jogos, otimizarem seu desempenho e descobrirem os caminhos para a "maestria" total, tudo isso com um toque de divers√£o e ilumina√ß√£o gamer.
**Instru√ß√µes Detalhadas:**

1. **An√°lise de Informa√ß√£o Avan√ßada:** Ao receber texto ou uma imagem, Ozy o Guru deve ser capaz de identificar elementos complexos relevantes para jogadores experientes, como interfaces de builds detalhadas, √°rvores de habilidades espec√≠ficas, rotas de speedrun, posicionamentos t√°ticos avan√ßados, estat√≠sticas ocultas, configura√ß√µes de otimiza√ß√£o gr√°fica/de performance, ou descri√ß√µes de estrat√©gias complexas. A an√°lise √© voltada para o *como* otimizar e dominar, n√£o para o b√°sico.
2. **Linguagem para Iniciados:** Utilize a linguagem t√©cnica e g√≠rias comuns no universo dos jogos (termos como "meta", "build", "DPS", "CC", "farming", "pull", "agro", etc.). Assuma que o usu√°rio entende esses termos. Explique um conceito *apenas* se for algo extremamente nichado, novo ou se o usu√°rio pedir explicitamente. O tom deve ser engajador e divertido, com o toque do guru.
3. **Contextualiza√ß√£o Estrat√©gica:** Contextualize os elementos analisados dentro de um quadro estrat√©gico ou t√°tico mais amplo e avan√ßado. Explique *por que* uma certa build funciona bem em alto n√≠vel, a l√≥gica por tr√°s de uma estrat√©gia complexa, ou a import√¢ncia de uma mec√¢nica espec√≠fica para a otimiza√ß√£o do jogo.
4. **Busca e Recomenda√ß√£o de V√≠deos:** Quando a solicita√ß√£o do usu√°rio envolver um t√≥pico complexo que se beneficia de demonstra√ß√£o visual (como uma rota complexa, timing de habilidades, execu√ß√£o de combos, etc.), Ozy o Guru deve *procurar* por tutoriais em v√≠deo relevantes e de boa qualidade online. Apresente os resultados como recomenda√ß√µes, talvez com um breve resumo do que o v√≠deo cobre e um link direto.
5. **Cria√ß√£o de Guias Detalhados:** Para t√≥picos que podem ser bem explicados via texto ou imagem, estruture tutoriais ou guias passo a passo *detalhados* e focados em aspectos avan√ßados. Organize as informa√ß√µes de forma l√≥gica para algu√©m que j√° domina o b√°sico do jogo.
6. **Humor e Persona de Guru:** Mantenha consistentemente a persona de Ozy o Guru. As respostas devem conter elementos c√¥micos, frases de "ilumina√ß√£o gamer", met√°foras engra√ßadas relacionadas √† jornada do jogador em busca da maestria. O humor deve ser leve e servir para tornar as informa√ß√µes avan√ßadas mais digestas e divertidas.
7. **Assumir Conhecimento Base:** *Diferente do Professor Ozy para iniciantes*, Ozy o Guru *deve* assumir que o usu√°rio j√° possui um conhecimento s√≥lido dos controles b√°sicos, objetivos prim√°rios e mec√¢nicas fundamentais do jogo. Se o usu√°rio fizer uma pergunta surpreendentemente b√°sica, reaja com um humor suave (ex: "Hmmm, parece que a jornada ainda est√° nos passos iniciais, meu padawan gamer!"), mas ainda assim forne√ßa a resposta de forma concisa e rapidamente volte para t√≥picos mais avan√ßados ou pergunte se o usu√°rio precisa de mais base.
8. **Foco na Maestria e Otimiza√ß√£o:** O objetivo primordial n√£o √© apenas a divers√£o casual, mas sim a busca pela excel√™ncia, otimiza√ß√£o e dom√≠nio completo do jogo. Incentive a pr√°tica, a experimenta√ß√£o com t√°ticas avan√ßadas e a an√°lise profunda.
9. **Lidar com Ambiguidade:** Jogadores experientes podem fazer perguntas complexas ou usar jarg√µes espec√≠ficos de comunidades. Ozy o Guru deve tentar interpretar a solicita√ß√£o da melhor forma poss√≠vel, pedindo esclarecimentos (com humor) se necess√°rio, mas sempre direcionando a resposta para o n√≠vel de conhecimento avan√ßado esperado.
**Exemplo de Intera√ß√£o:**

**Usu√°rio:** Ozy, estou tendo problemas pra otimizar meu ciclo de habilidades como 'Mago Arcano' em World of Warcraft para raids. Tenho um print da minha UI e meus talentos aqui [anexo imagem]. Como fa√ßo pra maximizar meu DPS?
**Ozy o Guru:** Ah, aspirante a arquimago! Buscando a verdadeira ilumina√ß√£o do dano arcano, √©? Vejo sua configura√ß√£o... Hmmm, seus talentos mostram potencial, mas a rota√ß√£o √© o segredo dos antigos magos! Para maximizar seu DPS, a medita√ß√£o (ou seja, sua rota√ß√£o!) deve ser perfeita. Primeiramente, foque em manter o 'Poder Arcano' alto. Use 'Explos√£o Arcana' para acumular cargas rapidamente, mas cuide da sua mana como um monge cuida de seu chi! 'M√≠sseis Arcanos' e 'Barragem Arcana' s√£o suas ferramentas de purifica√ß√£o de mana e dano concentrado. Durante suas fases de explos√£o ('Burn Phase'), alinhe seus 'Potenciamento Arcano' com outros CDs (cooldowns) importantes. √â um momento de transcender o medo do esvaziamento de mana!

Vejo que voc√™ usa um addon de rastreamento... excelente! Mantenha um olho no proc de 'M√≠sseis Arcanos'. √â um presente dos c√©us arcanos, use-o sabiamente para canalizar dano enquanto recupera mana com 'Evoca√ß√£o'. Buscar a perfei√ß√£o nesta arte requer pr√°tica. Para uma demonstra√ß√£o visual da rota√ß√£o em a√ß√£o, medite sobre estes pergaminhos digitais (tutoriais em v√≠deo):

- **[Link YouTube 1]: Guia Completo Rota√ß√£o Mago Arcano 10.2 - WOW** (Mostra a rota√ß√£o b√°sica e avan√ßada)
- **[Link YouTube 2]: An√°lise de Log de Raid Mago Arcano - Otimiza√ß√£o de DPS** (Para quem busca a ilumina√ß√£o m√°xima na an√°lise!)

Lembre-se, a maestria n√£o √© apenas na rota√ß√£o, mas na sua adapta√ß√£o a cada encontro. Que seus proj√©teis arcanos sempre atinjam o alvo, meu caro padawan de alto n√≠vel! Qualquer d√∫vida mais profunda, Ozy o Guru est√° aqui!
"""
        )
    else:
        # Caso nenhuma persona seja selecionada (o que n√£o deve acontecer com o radio), usa a base
        prompt_sistema_persona = prompt_sistema_base

    # Cria o modelo generativo do Gemini com as configura√ß√µes e a instru√ß√£o do sistema (persona)
    model = genai.GenerativeModel(
        model_name='gemini-2.0-flash', # Define qual modelo Gemini usar (flash √© mais r√°pido e barato)
        generation_config=generation_config, # Aplica as configura√ß√µes de gera√ß√£o
        safety_settings=safety_settings, # Aplica as configura√ß√µes de seguran√ßa
        system_instruction=prompt_sistema_persona # Define a persona da IA
    )
    # Retorna o modelo configurado
    return model

# =============================================================================
# Configura√ß√£o Inicial da P√°gina Streamlit (repetido, pode ser removido)
# J√° foi configurado no in√≠cio do script com st.set_page_config
# =============================================================================

# T√≠tulo principal exibido na p√°gina
st.title("OZY: O Assistente para Jogadores")
# Legenda abaixo do t√≠tulo
st.caption("Duas personas, infinitas possibilidades de ajuda.")

# =============================================================================
# Gerenciamento de Estado com st.session_state
# Mant√©m as informa√ß√µes (como hist√≥rico e persona) vivas entre as intera√ß√µes do usu√°rio
# =============================================================================

# st.session_state √© como um dicion√°rio que guarda informa√ß√µes para cada sess√£o do usu√°rio
# Se 'historico_chat' n√£o existe no estado da sess√£o, ele √© criado como um dicion√°rio vazio
# Este dicion√°rio vai guardar o hist√≥rico de mensagens (usu√°rio e IA) para CADA persona
if "historico_chat" not in st.session_state:
    st.session_state.historico_chat = {}

# Se 'persona_selecionada' n√£o existe, define o valor inicial como "Professor Ozy"
# Guarda qual persona est√° ativa no momento
if "persona_selecionada" not in st.session_state:
    st.session_state.persona_selecionada = "Professor Ozy"

# Se 'historico_gemini' n√£o existe, cria como um dicion√°rio vazio
# Este dicion√°rio vai guardar o objeto 'chat_session' da API Gemini para CADA persona
# O objeto chat_session √© que mant√©m o hist√≥rico interno da conversa com o modelo Gemini
if "historico_gemini" not in st.session_state:
    st.session_state.historico_gemini = {}

# O estado do switch dos agentes √© gerenciado aqui tamb√©m
# J√° inicializado acima antes da defini√ß√£o condicional das fun√ß√µes
# if "agentes_ativos" not in st.session_state: st.session_state.agentes_ativos = False # J√° est√° inicializado na se√ß√£o condicional dos agentes

# --- Adicionado para controlar a limpeza do uploader usando chave din√¢mica ---
# Inicializa o contador para a chave din√¢mica do uploader
if "uploader_key_counter" not in st.session_state:
    st.session_state.uploader_key_counter = 0
# --- Fim da adi√ß√£o ---

# =============================================================================
# Sidebar (Barra Lateral)
# Onde ficam as op√ß√µes e informa√ß√µes adicionais
# =============================================================================

# Inicia um bloco de c√≥digo que ser√° exibido na barra lateral
with st.sidebar:
    st.markdown("## ‚ú® Ozy o Assistente ‚ú®") # T√≠tulo na sidebar
    st.markdown("Configura√ß√µes do Ozy:") # Texto explicativo
    st.markdown("---") # Linha divis√≥ria

    st.subheader("ESCOLHA A PERSONALIDADE:") # Subt√≠tulo

    # Cria bot√µes de r√°dio para selecionar a persona
    persona_escolhida = st.radio(
        " ", # T√≠tulo vazio para o grupo de bot√µes
        ("Professor Ozy", "Ozy o Guru"), # Op√ß√µes de persona
        key="persona_radio", # Chave no session_state para o valor selecionado
        on_change=lambda: setattr(st.session_state, 'persona_selecionada', st.session_state.persona_radio)
    )
    # Garante que o session_state.persona_selecionada reflita a escolha imediatamente
    st.session_state.persona_selecionada = persona_escolhida

    st.markdown("---")

     # Descri√ß√µes curtas de cada persona na sidebar
    st.markdown("üë®‚Äçüè´ **Professor Ozy:**", unsafe_allow_html=True)
    st.write("Ideal para quem est√° come√ßando, explica de forma clara e sem jarg√µes. Excelente pra quem quer aprender a jogar com os filhos ou apenas aproveitar o mundo dos jogos sem complica√ß√µes.")

    st.markdown("üßô‚Äç‚ôÇÔ∏è **Ozy o Guru:**", unsafe_allow_html=True)
    st.write("Ideal para Gamers experientes e que buscam reduzir o tempo na procura de tutoriais e outros conte√∫dos.")

    st.markdown("---")

    # Adiciona o Switch (checkbox) para ativar/desativar os agentes
    st.subheader("OP√á√ïES AVAN√áADAS:")
    st.session_state.agentes_ativos = st.checkbox(
        "Ativar o Pesquisador Ozy",
        value=st.session_state.agentes_ativos, # Define o estado inicial do checkbox
        key="agentes_checkbox" # Chave para persistir o estado do checkbox
    )
    st.write("*(Caso queira respostas mais acertivas ative essa op√ß√£o. Mas a resposta pode levar alguns segundos a mais para ser enviada.)*")

    st.markdown("---")

   

    # Bot√£o para limpar o hist√≥rico da persona ATUALMENTE selecionada
    if st.button(f"üîÑ Limpar Hist√≥rico ({st.session_state.persona_selecionada})"):
        # Limpa o hist√≥rico de mensagens para exibi√ß√£o da persona atual
        st.session_state.historico_chat[st.session_state.persona_selecionada] = []
        # Limpa o objeto chat_session da API Gemini para a persona atual
        st.session_state.historico_gemini[st.session_state.persona_selecionada] = None
        # Incrementa o contador para gerar uma nova chave para o uploader na pr√≥xima execu√ß√£o
        st.session_state.uploader_key_counter += 1
        # Reinicia a aplica√ß√£o Streamlit para refletir a mudan√ßa e limpar o uploader
        st.rerun()


# =============================================================================
# Interface Principal - Upload de Imagem e Hist√≥rico do Chat
# Onde o usu√°rio interage diretamente com a IA
# =============================================================================

# Cria um cont√™iner (uma √°rea) com altura fixa e barra de rolagem para o chat
chat_container = st.container(height=400)

# Vari√°vel para guardar a imagem carregada pelo usu√°rio, come√ßa como None (vazia)
imagem_carregada = None
# Cria um campo para o usu√°rio fazer upload de um arquivo de imagem
# Usamos a chave din√¢mica gerada pelo contador para for√ßar o reset
uploaded_file = st.file_uploader(
    "Envie uma print do seu jogo (opcional):",
    type=["jpg", "jpeg", "png"],
    key=f"image_uploader_{st.session_state.uploader_key_counter}" # Chave din√¢mica
)

# Se um arquivo de imagem foi carregado pelo usu√°rio nesta execu√ß√£o
if uploaded_file:
    # Abre a imagem usando a biblioteca Pillow
    imagem_carregada = Image.open(uploaded_file)
    # Exibe a imagem carregada na interface
    st.image(imagem_carregada, caption="Imagem carregada.", width=300)




# Pega o hist√≥rico de mensagens espec√≠fico da persona que est√° selecionada no momento
historia_da_persona_atual = st.session_state.historico_chat.get(st.session_state.persona_selecionada, [])

# Bloco de c√≥digo para exibir as mensagens do hist√≥rico no cont√™iner do chat
with chat_container:
    # Percorre cada mensagem no hist√≥rico da persona atual
    for mensagem in historia_da_persona_atual:
        # Cria um bal√£o de chat (mensagem) na interface do Streamlit
        with st.chat_message(mensagem["role"]):
            if mensagem["role"] == "assistant":
                st.markdown(f"**_{mensagem.get('persona', 'IA')}_**")
            st.markdown(mensagem["content"])
            if "image" in mensagem and mensagem["image"] is not None:
                st.image(mensagem["image"], width=200)


# =============================================================================
# Entrada de Texto do Usu√°rio
# Onde o usu√°rio digita sua pergunta
# =============================================================================

# Cria a caixa de texto na parte inferior da tela onde o usu√°rio digita a mensagem
prompt_usuario = st.chat_input(f"Converse com {st.session_state.persona_selecionada}...", key="chat_input")


# =============================================================================
# Processamento da Mensagem do Usu√°rio e Intera√ß√£o com a IA
# O que acontece quando o usu√°rio envia uma mensagem
# =============================================================================

# Este bloco s√≥ roda se o usu√°rio digitou algo e apertou Enter (ou enviou)
if prompt_usuario:

    # Inicializa a vari√°vel para o resultado da busca do agente
    search_result = None

    # =============================================================================
    # Chamada Condicional aos Agentes
    # S√≥ executa se o Switch na sidebar estiver ativado
    # =============================================================================
    if st.session_state.agentes_ativos:
        st.info("Pesquisador Ozy trabalhando...")
        try:
            # Chama o agente para simplificar o prompt
            simplified_prompt = agent_simplifier(prompt_usuario)
            st.text(f"Criando um prompt limpinho: {simplified_prompt}") # Exibe o prompt simplificado (opcional para debug)

            # Chama o agente para realizar a busca com o prompt simplificado
            # Passa a data atual (embora o agente n√£o a use neste c√≥digo)
            search_result = agent_searcher(simplified_prompt)
            # st.text(f"Resultado da busca do agente: {search_result}") # Exibe o resultado da busca (opcional para debug)
        except Exception as e:
            st.error(f"Erro durante a execu√ß√£o do Pesquisador: {e}")
            search_result = "Erro na busca." # Define um resultado de erro
        st.info("Pesquisador Ozy terminou.")
    else:
        print("Pesquizador Ozy foi desativado.") # Mensagem para o console

    # Prepara o conte√∫do que ser√° enviado para o modelo Gemini
    # Inclui o prompt do usu√°rio e, se houver, a imagem e o resultado da busca dos agentes
    conteudo_para_enviar = []

    # Se uma imagem foi carregada, adiciona ela ao in√≠cio da lista de conte√∫do
    # Usamos 'uploaded_file' para verificar se um arquivo foi carregado nesta intera√ß√£o
    if uploaded_file:
        # A imagem j√° foi aberta em 'imagem_carregada' logo ap√≥s o uploader
        conteudo_para_enviar.append(imagem_carregada) # Adiciona a imagem

    # Adiciona o prompt original do usu√°rio
    conteudo_para_enviar.append(prompt_usuario)

    # Se os agentes estavam ativos e retornaram um resultado de busca, adicione-o ao conte√∫do
    if st.session_state.agentes_ativos and search_result and search_result.strip() and search_result != "Erro na busca.":
        # Formata o resultado da busca para que o modelo Gemini possa us√°-lo como contexto
        # Verifica se o resultado n√£o √© vazio ap√≥s remover espa√ßos em branco
        conteudo_para_enviar.append(f"\n\n--- Contexto de Pesquisa do Google ---\n{search_result}\n--- Fim do Contexto ---")
        st.info("Resultado da busca inclu√≠do no prompt para a IA principal.")


    # Pega a persona que est√° ativa no momento
    persona_atual = st.session_state.persona_selecionada

    # Verifica se j√° existe um objeto chat_session da API Gemini para a persona atual
    if persona_atual not in st.session_state.historico_gemini or st.session_state.historico_gemini[persona_atual] is None:
        # Se n√£o existe ou foi limpo, configura um novo modelo Gemini para essa persona
        modelo_gemini = configurar_modelo_gemini(persona_atual)
        # Inicia uma NOVA sess√£o de chat com o modelo Gemini para essa persona
        # history=[] garante que a conversa comece do zero para o MODELO na nova sess√£o
        st.session_state.historico_gemini[persona_atual] = modelo_gemini.start_chat(history=[])
        print(f"Iniciando nova sess√£o de chat para {persona_atual}")
    else:
        # Se j√° existe um objeto chat_session para essa persona, usa ele
        print(f"Continuando sess√£o de chat para {persona_atual}")


    # Pega o objeto chat_session (novo ou existente) para a persona atual
    chat_session = st.session_state.historico_gemini[persona_atual]

    # Garante que o hist√≥rico de mensagens de exibi√ß√£o exista para a persona atual
    if persona_atual not in st.session_state.historico_chat:
        st.session_state.historico_chat[persona_atual] = []

    # Adiciona a mensagem do usu√°rio ao hist√≥rico de mensagens para exibi√ß√£o
    mensagem_usuario_para_exibir = {"role": "user", "content": prompt_usuario, "persona": "Voc√™"}
    # Adiciona a imagem ao hist√≥rico de exibi√ß√£o APENAS se ela foi carregada nesta intera√ß√£o
    if uploaded_file: # Usa uploaded_file para verificar se um arquivo foi submetido
        mensagem_usuario_para_exibir["image"] = imagem_carregada # Adiciona a imagem aberta
    st.session_state.historico_chat[persona_atual].append(mensagem_usuario_para_exibir)


    # Exibe um indicador de carregamento enquanto a IA est√° processando
    with st.spinner(f"{persona_atual} est√° digitando..."):
        try:
            # Envia a mensagem e o conte√∫do adicional (imagem, busca) para o modelo Gemini
            # chat_session.send_message aceita uma lista de partes
            response = chat_session.send_message(conteudo_para_enviar)

            # Pega o texto da resposta da IA
            resposta_ia = response.text

        except Exception as e:
            st.error(f"Erro ao comunicar com a API Gemini ou gerar resposta: {e}")
            resposta_ia = "Desculpe, n√£o consegui processar sua solicita√ß√£o no momento." # Resposta padr√£o

    # Adiciona a resposta da IA ao hist√≥rico de mensagens para exibi√ß√£o
    st.session_state.historico_chat[persona_atual].append({
        "role": "assistant",
        "content": resposta_ia,
        "persona": persona_atual
    })

    # --- L√≥gica para limpar o coletor de imagens ap√≥s o envio usando chave din√¢mica ---
    # Incrementa o contador para gerar uma nova chave para o uploader na pr√≥xima execu√ß√£o
    st.session_state.uploader_key_counter += 1
    st.rerun() # For√ßa a reexecu√ß√£o para aplicar a nova chave e limpar o uploader
    # --- Fim da l√≥gica de limpeza ---

    # O st.rerun() que estava aqui pode ser removido ou substitu√≠do pelo st.experimental_rerun() acima
    # st.rerun() # Removido